# Production Docker Compose Configuration
# Mental Health AI Agent with RAG Enhancement and LangGraph Workflow

version: '3.8'

services:
  # Main Application
  mental-health-ai:
    build:
      context: .
      dockerfile: Dockerfile.production
      args:
        NODE_ENV: production
    container_name: mental-health-ai-app
    restart: unless-stopped
    ports:
      - "${PORT:-3000}:3000"
      - "${METRICS_PORT:-9090}:9090"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - METRICS_PORT=9090
      - DATABASE_URL=${DATABASE_URL}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - REDIS_URL=redis://redis:6379
      - MONITORING_ENABLED=true
      - RAG_ENABLED=true
      - LANGGRAPH_ENABLED=true
      - LOG_LEVEL=info
      - SENTRY_DSN=${SENTRY_DSN}
    volumes:
      - ./config:/app/config:ro
      - ./logs:/var/log/mental-health-ai
      - app-data:/app/data
    depends_on:
      - redis
      - postgres
    networks:
      - mental-health-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mental-health-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - mental-health-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'

  # PostgreSQL Database (for application data, not vector storage)
  postgres:
    image: postgres:15-alpine
    container_name: mental-health-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-mental_health_ai}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS="--auth-host=scram-sha-256"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - mental-health-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-mental_health_ai}"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: mental-health-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.external-url=http://localhost:9091'
    networks:
      - mental-health-network
    depends_on:
      - mental-health-ai
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: mental-health-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning:ro
    networks:
      - mental-health-network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'

  # Log Aggregation - Loki
  loki:
    image: grafana/loki:latest
    container_name: mental-health-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./config/loki.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - mental-health-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'

  # Log Collection - Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: mental-health-promtail
    restart: unless-stopped
    volumes:
      - ./config/promtail.yml:/etc/promtail/config.yml:ro
      - ./logs:/var/log/mental-health-ai:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - mental-health-network
    depends_on:
      - loki
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

  # Reverse Proxy - Nginx
  nginx:
    image: nginx:alpine
    container_name: mental-health-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    networks:
      - mental-health-network
    depends_on:
      - mental-health-ai
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

# Networks
networks:
  mental-health-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  app-data:
    driver: local
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  loki-data:
    driver: local
  nginx-logs:
    driver: local

# Health Check Configuration
x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s

# Resource Limits
x-resource-limits: &resource-limits
  deploy:
    resources:
      limits:
        memory: 1G
        cpus: '0.5'
      reservations:
        memory: 256M
        cpus: '0.1'